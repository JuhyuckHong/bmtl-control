import { useState, useCallback, useEffect } from "react";

const CAMERA_CONTROL_TOPICS = [
    // ÏÑúÎπÑÏä§ ÏÉÅÌÉú
    "bmtl/status/health/+",
    // Í∞úÎ≥Ñ ÏÑ§Ï†ï ÏùëÎãµ
    "bmtl/response/settings/+",
    // ÏÑ§Ï†ï Î≥ÄÍ≤Ω ÏùëÎãµ
    "bmtl/response/set/settings/+",
    // Ïû¨Î∂ÄÌåÖ ÏùëÎãµ
    "bmtl/response/reboot/+",
    "bmtl/response/reboot/all",
    // Í∞úÎ≥Ñ options ÏùëÎãµ
    "bmtl/response/options/+",
    // Ï†ÑÏ≤¥ options ÏùëÎãµ
    "bmtl/response/options/all",
    // ÏÉÅÌÉú ÏùëÎãµ
    // ÏôÄÏù¥Ìçº ÏùëÎãµ
    "bmtl/response/wiper/+",
    // Ïπ¥Î©îÎùº Ï†ÑÏõê ÏùëÎãµ
    "bmtl/response/camera-on-off/+",
    // ÏÇ¨Ïù¥Ìä∏Î™Ö ÏùëÎãµ
    "bmtl/response/sitename/+",
    // SW ÏóÖÎç∞Ïù¥Ìä∏ ÏùëÎãµ
    "bmtl/response/sw-update/+",
    // SW Î≤ÑÏ†Ñ ÏùëÎãµ
    "bmtl/response/sw-version/+",
];

const hasStatusDiff = (existingModule, statusData = {}) => {
    if (!existingModule) {
        return true;
    }

    return Object.entries(statusData).some(([key, value]) => existingModule[key] !== value);
};

export const useCameraStatus = (mqttClient, subscribedTopics, recordPublish) => {
    const [moduleStatuses, setModuleStatuses] = useState({});
    const [moduleSettings, setModuleSettings] = useState({});
    const [moduleOptions, setModuleOptions] = useState({});
    const [localSubscribedTopics, setLocalSubscribedTopics] = useState(new Set());
    const isDevelopment = process.env.NODE_ENV === "development";
    const debugLog = (...args) => {
        if (isDevelopment) {
            window.console.log(...args);
        }
    };

    // Î™®Îìà ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    const updateModuleStatus = useCallback((moduleId, statusData = {}) => {
        setModuleStatuses((prev) => {
            const existingModule = prev[moduleId];
            const nextTimestamp = new Date();
            const hasChange = hasStatusDiff(existingModule, statusData);
            const baseModule = existingModule || {};

            const nextModule = hasChange
                ? { ...baseModule, ...statusData, lastUpdated: nextTimestamp }
                : { ...baseModule, lastUpdated: nextTimestamp };

            return {
                ...prev,
                [moduleId]: nextModule,
            };
        });
    }, []);

    // Î™®Îìà ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
    const updateModuleSettings = useCallback((moduleId, settingsData) => {
        setModuleSettings((prev) => ({
            ...prev,
            [moduleId]: settingsData,
        }));
    }, []);

    // Î™®Îìà options ÏóÖÎç∞Ïù¥Ìä∏
    const updateModuleOptions = useCallback((moduleId, optionsData) => {
        setModuleOptions((prev) => ({
            ...prev,
            [moduleId]: optionsData,
        }));
    }, []);

    // Í∞úÎ≥Ñ Î™®Îìà Ïû¨Î∂ÄÌåÖ
    const sendRebootCommand = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/request/reboot/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send reboot command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] Reboot command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // Í∞úÎ≥Ñ Î™®Îìà ÏÑ§Ï†ï Î≥ÄÍ≤Ω
    const sendConfigureCommand = useCallback(
        (moduleId, settings) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/set/settings/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify(settings);

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send configure command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] Configure command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // Ï†ÑÏ≤¥ Ïû¨Î∂ÄÌåÖ
    const sendGlobalRebootCommand = useCallback(() => {
        if (!mqttClient?.connected) return;

        const topic = "bmtl/request/reboot/all";
        const payload = JSON.stringify({});

        mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
            if (err) {
                console.error("‚ùå [MQTT Publish] Failed to send global reboot command:", err);
            } else {
                debugLog("üöÄ [MQTT Publish] Global reboot command sent");
                debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                if (recordPublish) {
                    recordPublish(topic, payload, 2);
                }
            }
        });
    }, [mqttClient]);

    // Ï†ÑÏ≤¥ ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
    const requestAllSettings = useCallback(() => {
        if (!mqttClient?.connected) return;

        const topic = "bmtl/request/settings/all";
        const payload = JSON.stringify({});

        mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
            if (err) {
                console.error("Failed to request all settings:", err);
            } else {
                debugLog("All settings request sent", topic, payload);
                if (recordPublish) {
                    recordPublish(topic, payload, 2);
                }
            }
        });
    }, [mqttClient]);

    // Í∞úÎ≥Ñ Î™®Îìà options ÏöîÏ≤≠
    const requestOptions = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/request/options/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`Failed to request options for module ${moduleId}:`, err);
                } else {
                    debugLog(`Options request sent for module ${moduleId}`, topic, payload);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // Ï†ÑÏ≤¥ Î™®Îìà options ÏöîÏ≤≠
    const requestAllOptions = useCallback(() => {
        if (!mqttClient?.connected) return;

        const topic = "bmtl/request/options/all";
        const payload = JSON.stringify({});

        mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
            if (err) {
                console.error("Failed to request all options:", err);
            } else {
                debugLog("All options request sent", topic, payload);
                if (recordPublish) {
                    recordPublish(topic, payload, 2);
                }
            }
        });
    }, [mqttClient]);

    // ÏôÄÏù¥Ìçº 30Ï¥à ÎèôÏûë Î™ÖÎ†π
    const sendWiperCommand = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/request/wiper/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send wiper command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] Wiper command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // Ïπ¥Î©îÎùº Ï†ÑÏõê On/Off Î™ÖÎ†π
    const sendCameraPowerCommand = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/request/camera-on-off/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send camera power command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] Camera power command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // ÏÇ¨Ïù¥Ìä∏ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Î™ÖÎ†π
    const sendSiteNameCommand = useCallback(
        (moduleId, siteName) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/set/sitename/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({ sitename: siteName });

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send sitename command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] Sitename command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // SW ÏóÖÎç∞Ïù¥Ìä∏ Î™ÖÎ†π
    const sendSwUpdateCommand = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/sw-update/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`‚ùå [MQTT Publish] Failed to send SW update command to module ${moduleId}:`, err);
                } else {
                    debugLog(`üöÄ [MQTT Publish] SW update command sent to module ${moduleId}`);
                    debugLog(`üì° [MQTT Publish] Topic: ${topic}`);
                    debugLog(`üì¶ [MQTT Publish] Payload: ${payload}`);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // Í∞úÎ≥Ñ Î™®Îìà ÏÑ§Ï†ï ÏöîÏ≤≠
    const requestSettings = useCallback(
        (moduleId) => {
            if (!mqttClient?.connected) return;

            const topic = `bmtl/request/settings/${moduleId.toString().padStart(2, "0")}`;
            const payload = JSON.stringify({});

            mqttClient.publish(topic, payload, { qos: 2 }, (err) => {
                if (err) {
                    console.error(`Failed to request settings for module ${moduleId}:`, err);
                } else {
                    debugLog(`Settings request sent for module ${moduleId}`, topic, payload);
                    if (recordPublish) {
                        recordPublish(topic, payload, 2);
                    }
                }
            });
        },
        [mqttClient]
    );

    // ÌÜµÌï© Î™ÖÎ†π Ï†ÑÏÜ° Ìï®Ïàò (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±)
    const sendCommand = useCallback(
        (moduleId, command, data) => {
            if (moduleId === "global") {
                // Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Î™ÖÎ†π Ï≤òÎ¶¨
                switch (command) {
                    case "reboot":
                        sendGlobalRebootCommand();
                        break;
                    case "status_request":
                        requestAllSettings();
                        break;
                    case "options_request":
                        requestAllOptions();
                        break;
                    default:
                        console.warn(`Unknown global command: ${command}`);
                }
            } else {
                // Í∞úÎ≥Ñ Î™®Îìà Î™ÖÎ†π Ï≤òÎ¶¨
                switch (command) {
                    case "reboot":
                        sendRebootCommand(moduleId);
                        break;
                    case "configure":
                        sendConfigureCommand(moduleId, data);
                        break;
                    case "status_request":
                        requestSettings(moduleId);
                        break;
                    case "options_request":
                        requestOptions(moduleId);
                        break;
                    case "wiper":
                        sendWiperCommand(moduleId);
                        break;
                    case "camera-on-off":
                        sendCameraPowerCommand(moduleId);
                        break;
                    case "sitename":
                        sendSiteNameCommand(moduleId, data.sitename);
                        break;
                    case "sw-update":
                        sendSwUpdateCommand(moduleId);
                        break;
                    default:
                        console.warn(`Unknown command: ${command}`);
                }
            }
        },
        [sendRebootCommand, sendConfigureCommand, sendGlobalRebootCommand, requestAllSettings, requestAllOptions, requestSettings, requestOptions, sendWiperCommand, sendCameraPowerCommand, sendSiteNameCommand, sendSwUpdateCommand]
    );

    // Í∞úÎ≥Ñ Î™®Îìà ÏÑ§Ï†ï ÏöîÏ≤≠
    // MQTT Íµ¨ÎèÖ ÏÑ§Ï†ïÏùÄ connect Ïù¥Î≤§Ìä∏ÏóêÏÑú Ï≤òÎ¶¨

    // Î©îÏãúÏßÄ Ï≤òÎ¶¨
    useEffect(() => {
        if (!mqttClient) return;

        const handleMessage = (topic, message) => {
            try {
                const data = JSON.parse(message.toString());
                // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå ÏÉÅÏÑ∏ Î°úÍ∑∏ Ï∂úÎ†•
                if (process.env.NODE_ENV === 'development') {
                    debugLog(`üîî [MQTT Message] Topic: ${topic}`, data);
                }

                // ÌÜ†ÌîΩ ÌååÏã±
                const topicParts = topic.split("/");

                if (topic.startsWith("bmtl/status/health/")) {
                    // ÎîîÎ∞îÏù¥Ïä§ Ìó¨Ïä§ ÏÉÅÌÉú Ï≤òÎ¶¨ (Î©îÏãúÏßÄÎ•º Î∞õÏúºÎ©¥ Ïò®ÎùºÏù∏ÏúºÎ°ú Í∞ÑÏ£º)
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    if (process.env.NODE_ENV === 'development') {
                        debugLog(`üíö [Health Update] Module ${moduleId} - Online, Site: ${data.site_name}`);
                    }

                    updateModuleStatus(moduleId, {
                        isConnected: true, // Î©îÏãúÏßÄÎ•º Î∞õÏúºÎ©¥ Ïò®ÎùºÏù∏ÏúºÎ°ú Ï≤òÎ¶¨
                        siteName: data.site_name,
                        remainingCapacity: data.storage_used,
                        lastCaptureTime: data.last_capture_time,
                        lastBootTime: data.last_boot_time,
                        todayTotalCaptures: data.today_total_captures,
                        todayCapturedCount: data.today_captured_count,
                        missedCaptures: data.missed_captures,
                        swVersion: data.sw_version || data.swVersion, // SW Î≤ÑÏ†Ñ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
                    });
                } else if (topic.startsWith("bmtl/response/settings/")) {
                    // ÏÑ§Ï†ï ÏùëÎãµ Ï≤òÎ¶¨
                    if (topicParts[3] === "all") {
                        // Ï†ÑÏ≤¥ ÏÑ§Ï†ï ÏùëÎãµ
                        debugLog(`‚öôÔ∏è [Settings] All modules settings received`);
                        if (data.response_type === "all_settings") {
                            Object.entries(data.modules).forEach(([moduleKey, settings]) => {
                                const moduleId = parseInt(moduleKey.replace("camera_", ""), 10);
                                debugLog(`‚öôÔ∏è [Settings] Module ${moduleId} settings:`, settings);
                                updateModuleSettings(moduleId, settings);
                            });
                        }
                    } else {
                        // Í∞úÎ≥Ñ ÏÑ§Ï†ï ÏùëÎãµ
                        const moduleIdStr = topicParts[3];
                        const moduleId = parseInt(moduleIdStr, 10);
                        debugLog(`‚öôÔ∏è [Settings] Module ${moduleId} individual settings received`);

                        if (data.response_type === "settings") {
                            updateModuleSettings(moduleId, data.settings);
                        }
                    }
                } else if (topic.startsWith("bmtl/response/set/settings/")) {
                    // ÏÑ§Ï†ï Î≥ÄÍ≤Ω ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[4];
                    const moduleId = parseInt(moduleIdStr, 10);

                    debugLog(`üîß [Config Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed");
                } else if (topic.startsWith("bmtl/response/reboot/")) {
                    // Ïû¨Î∂ÄÌåÖ ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];

                    if (moduleIdStr === "all") {
                        debugLog(`üîÑ [Global Reboot Response]:`, data.success ? "‚úÖ Success" : "‚ùå Failed");
                    } else {
                        const moduleId = parseInt(moduleIdStr, 10);
                        debugLog(`üîÑ [Reboot Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed");
                    }
                } else if (topic.startsWith("bmtl/response/options/")) {
                    // options ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];

                    if (moduleIdStr === "all") {
                        // Ï†ÑÏ≤¥ options ÏùëÎãµ
                        debugLog(`üîç [Options] All modules options received`);
                        if (data.response_type === "all_options") {
                            Object.entries(data.modules).forEach(([moduleKey, options]) => {
                                const moduleId = parseInt(moduleKey.replace("camera_", ""), 10);
                                debugLog(`üîç [Options] Module ${moduleId} options:`, options);
                                updateModuleOptions(moduleId, options);
                            });
                        }
                    } else {
                        // Í∞úÎ≥Ñ options ÏùëÎãµ
                        const moduleId = parseInt(moduleIdStr, 10);
                        debugLog(`üîç [Options] Module ${moduleId} options received:`, data.options);

                        if (data.response_type === "options") {
                            updateModuleOptions(moduleId, data.options);
                        }
                    }
                } else if (topic.startsWith("bmtl/response/wiper/")) {
                    // ÏôÄÏù¥Ìçº ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    debugLog(`üßΩ [Wiper Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed");
                } else if (topic.startsWith("bmtl/response/camera-on-off/")) {
                    // Ïπ¥Î©îÎùº Ï†ÑÏõê ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    debugLog(`üîå [Camera Power Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed", `New state: ${data.new_state || 'Unknown'}`);
                } else if (topic.startsWith("bmtl/response/sitename/")) {
                    // ÏÇ¨Ïù¥Ìä∏ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    debugLog(`üè∑Ô∏è [Sitename Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed", `New sitename: ${data.sitename || 'Unknown'}`);

                    // ÏÑ±Í≥µ Ïãú Î™®Îìà ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                    if (data.success && data.sitename) {
                        updateModuleStatus(moduleId, {
                            siteName: data.sitename,
                        });
                    }
                } else if (topic.startsWith("bmtl/response/sw-update/")) {
                    // SW ÏóÖÎç∞Ïù¥Ìä∏ ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    debugLog(`üíø [SW Update Response] Module ${moduleId}:`, data.success ? "‚úÖ Success" : "‚ùå Failed", `Version: ${data.version || 'Unknown'}`);

                    // ÏÑ±Í≥µ Ïãú Î™®Îìà ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÏÉà SW Î≤ÑÏ†Ñ Î∞òÏòÅ)
                    if (data.success && data.version) {
                        updateModuleStatus(moduleId, {
                            swVersion: data.version,
                        });
                    }
                } else if (topic.startsWith("bmtl/response/sw-version/")) {
                    // SW Î≤ÑÏ†Ñ ÏùëÎãµ Ï≤òÎ¶¨
                    const moduleIdStr = topicParts[3];
                    const moduleId = parseInt(moduleIdStr, 10);
                    debugLog(`üìã [SW Version Response] Module ${moduleId}:`, `Commit Hash: ${data.commit_hash || 'Unknown'}`);

                    // SW Î≤ÑÏ†Ñ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                    if (data.commit_hash) {
                        updateModuleStatus(moduleId, {
                            swVersion: data.commit_hash,
                        });
                    }
                } else {
                    debugLog(`‚ùì [Unknown Topic] Unhandled topic: ${topic}`);
                }
            } catch (error) {
                console.error("Error parsing MQTT message:", error, "Topic:", topic);
            }
        };

        const handleConnect = () => {
            debugLog("üü¢ [MQTT Client] Connected to broker");

            // Ïó∞Í≤∞ Ïãú ÌÜ†ÌîΩ Íµ¨ÎèÖ

            debugLog(`üì° [MQTT Subscribe] Subscribing to ${CAMERA_CONTROL_TOPICS.length} topics for camera control:`);
            CAMERA_CONTROL_TOPICS.forEach((topic, index) => {
                mqttClient.subscribe(topic, (err) => {
                    if (!err) {
                        setLocalSubscribedTopics((prev) => new Set([...prev, topic]));
                        debugLog(`‚úÖ [MQTT Subscribe] ${index + 1}/${CAMERA_CONTROL_TOPICS.length} - ${topic}`);
                    } else {
                        console.error(`‚ùå [MQTT Subscribe] Failed to subscribe to ${topic}:`, err);
                    }
                });
            });
        };

        const handleDisconnect = () => {
            debugLog("üî¥ [MQTT Client] Disconnected from broker");
            // Ïó∞Í≤∞ Ìï¥Ï†ú Ïãú Íµ¨ÎèÖ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
            setLocalSubscribedTopics(new Set());
        };

        const handleReconnect = () => {
            debugLog("üîÑ [MQTT Client] Reconnecting to broker");
        };

        const handleError = (error) => {
            console.error("‚ùå [MQTT Client] Error:", error);
        };

        const handleOffline = () => {
            debugLog("üì¥ [MQTT Client] Gone offline");
        };

        const handleClose = () => {
            debugLog("üö™ [MQTT Client] Connection closed");
        };

        mqttClient.on("message", handleMessage);
        mqttClient.on("connect", handleConnect);
        mqttClient.on("disconnect", handleDisconnect);
        mqttClient.on("reconnect", handleReconnect);
        mqttClient.on("error", handleError);
        mqttClient.on("offline", handleOffline);
        mqttClient.on("close", handleClose);

        return () => {
            mqttClient.off("message", handleMessage);
            mqttClient.off("connect", handleConnect);
            mqttClient.off("disconnect", handleDisconnect);
            mqttClient.off("reconnect", handleReconnect);
            mqttClient.off("error", handleError);
            mqttClient.off("offline", handleOffline);
            mqttClient.off("close", handleClose);
        };
    }, [mqttClient, updateModuleStatus, updateModuleSettings]);

    // Î™®Îìà Ïó∞Í≤∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Î∞è Íµ¨ÎèÖ ÏÉÅÌÉú Î°úÍπÖ (5Î∂ÑÍ∞Ñ ÏùëÎãµ ÏóÜÏúºÎ©¥ Ïò§ÌîÑÎùºÏù∏ Ï≤òÎ¶¨)
    useEffect(() => {
        const interval = setInterval(() => {
            const now = new Date();

            // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå ÏÉÅÌÉú Î°úÍπÖ
            if (process.env.NODE_ENV === 'development') {
                debugLog(`üìä [MQTT Status] Subscribed topics: ${localSubscribedTopics.size}`);
            }

            setModuleStatuses((prev) => {
                const updated = {};
                let hasChanges = false;

                Object.keys(prev).forEach((moduleId) => {
                    const module = prev[moduleId];
                    const lastUpdated = module.lastUpdated;

                    if (lastUpdated && now - lastUpdated > 5 * 60 * 1000 && module.isConnected !== false) {
                        updated[moduleId] = { ...module, isConnected: false };
                        hasChanges = true;
                    } else {
                        updated[moduleId] = module;
                    }
                });

                return hasChanges ? updated : prev;
            });
        }, 30000); // 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨

        return () => clearInterval(interval);
    }, [localSubscribedTopics]); // moduleStatuses ÏùòÏ°¥ÏÑ± Ï†úÍ±∞

    return {
        moduleStatuses,
        moduleSettings,
        moduleOptions,
        sendCommand,
        requestSettings,
        requestOptions,
        requestAllOptions,
    };
};
